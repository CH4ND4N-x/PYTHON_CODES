
'''List Comprehension'''

# Find squares of a number using for loop.
numbers = [1, 2, 3, 4]
squares = []

for n in numbers:
    squares.append(n**2)
print(squares)  


# Finding squares using list comprehensions
numbers = [1, 2, 3, 4]
squares = [n**2 for n in numbers]
print(squares)  

# Add only even numbers in the list
a = [1,2,3,4]
b = [x      for x in a      if x % 2 == 1]
print(b)

# Example for usage of if and else
a = [1,2,3,4]
c = [x+1    if x >= 5    else x+2      for x in a]
print(c)




'''Filter'''

'''Create a new list which has all the numbers divisible by 3 or 5 in the range of 2 to 25'''
# Approach 1
my_list = list(range(2,25 ))
new_list =[]

for x in my_list:
    if (x%3 ==0 or x%5 ==0) :
        new_list.append(x)
print(new_list)
        

# Approach 2
new_list = [x for x in my_list if x%3 ==0 or x%5 ==0 ]
print(new_list)


# Approach 3
def f(x) :
    return x%3 ==0 or x%5 ==0 

new_list = list(filter ( f, my_list ))
print(new_list)


# Approach 4
# Filter with Lambda function 
new_list = list ( filter ( lambda x:x%3==0 or x%5==0, my_list) )
print(new_list)



'''Map''' 

# Return double of n 
def addition(n): 
  return n + n 

# We double all numbers using map() 
numbers = [1, 2, 3, 4] 
result = map(addition, numbers) 
print(list(result)) 


# Double all numbers using map and lambda 
numbers = [1, 2, 3, 4] 
result = map(lambda n: n + n, numbers) 
print(list(result)) 


# List of strings 
l = ['sat', 'bat', 'cat', 'mat'] 
# map() can listify the list of strings individually 
test = list(map(list, l)) 
print(test) 




''' Taking multiple input from the user in single line and adding into a list as integers'''

user_input = input("Enter the numbers> ")

user_list = user_input.split(',')

# Way 1
user_list2 = []
for item in user_list:
    user_list2.append(int(item))

# Way 2
user_list = [int(item) for item in user_list]


# Way 3
user_list = [int(item) for item in input().split(',')]

# Way 4
user_list = map(int, input().split(','))


# How to use if within the map and lambda
list (map(lambda x: True if x % 2 == 0 else False, range(1, 11)))



'''Reduce'''

from functools import reduce

def add(x,y):
    return x+y
my_list=[2,18,9,22,17,24,8,12,27]
print (reduce ( add, my_list ) )


# Reduce with Lambda function 
print (reduce (lambda x,y : x + y,[2,18,9,22,17,24,8,12,27]))



'''zip'''
list_a = [1, 2, 3]
list_b = [4, 5, 6,7]

zipped = zip(list_a, list_b) # Output: Zip Object. <zip at 0x4c10a30>

len(zipped) # TypeError: object of type 'zip' has no len()

zipped[0] # TypeError: 'zip' object is not subscriptable

list_c = list(zipped) #Output: [(1, 4), (2, 5), (3, 6)]
print (list_c)

list_d = list(zipped) # Output []... Output is empty list becuase by the above statement zip got exhausted.
print (list_d)

'''Usage of Any in Python'''

# Since all are false, false is returned 
print (any([False, False, False, False])) 
  
# Here the method will short-circuit at the 
# second item (True) and will return True. 
print (any([False, True, False, False])) 
  
# Here the method will short-circuit at the 
# first (True) and will return True. 
print (any([True, False, False, True])) 


'''Usage of All in Python'''

# Here all the iterables are True so all 
# will return True and the same will be printed 
print (all([True, True, True, True])) 
  
# Here the method will short-circuit at the  
# first item (False) and will return False. 
print (all([False, True, True, False])) 
  
# This statement will return False, as no 
# True is found in the iterables 
print (all([False, False, False])) 